% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/css2r.R
\name{css2r}
\alias{css2r}
\title{Extract CSS styles from a website to generate a Shiny theme}
\description{
The css2r class analyzes CSS styles from a website and automatically generates
a corresponding Shiny theme. It extracts main colors, Google Fonts, and creates
compatible bslib code.
}
\details{
This class uses a step-by-step approach to:
* Download the HTML page
* Extract CSS links
* Analyze used colors
* Detect Google Fonts
* Generate a compatible Shiny theme
}
\examples{
\dontrun{
# Simple creation
site_theme <- css2r$new(url = "https://example.com")

# Creation without automatic initialization
site_theme <- css2r$new(url = "https://example.com", on_initialize = FALSE)
site_theme$download_html()
site_theme$extract_css_links()
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{url}}{URL of the website to analyze}

\item{\code{domain}}{Website domain}

\item{\code{html_page}}{HTML content of the page}

\item{\code{all_css_links}}{List of all found CSS links}

\item{\code{domain_css_links}}{Filtered CSS links from the domain}

\item{\code{css_content}}{Downloaded CSS content}

\item{\code{all_colors}}{List of all found colors}

\item{\code{top_colors}}{Analyzed main colors}

\item{\code{fonts}}{Detected Google Fonts}

\item{\code{shiny_code}}{Generated Shiny theme code}

\item{\code{shiny_theme}}{Generated Shiny theme}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-css2r-new}{\code{css2r$new()}}
\item \href{#method-css2r-check_internet}{\code{css2r$check_internet()}}
\item \href{#method-css2r-download_html}{\code{css2r$download_html()}}
\item \href{#method-css2r-extract_css_links}{\code{css2r$extract_css_links()}}
\item \href{#method-css2r-filter_css_links}{\code{css2r$filter_css_links()}}
\item \href{#method-css2r-download_css_files}{\code{css2r$download_css_files()}}
\item \href{#method-css2r-extract_colors}{\code{css2r$extract_colors()}}
\item \href{#method-css2r-analyze_colors}{\code{css2r$analyze_colors()}}
\item \href{#method-css2r-detect_google_fonts}{\code{css2r$detect_google_fonts()}}
\item \href{#method-css2r-generate_shiny_code}{\code{css2r$generate_shiny_code()}}
\item \href{#method-css2r-clone}{\code{css2r$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-css2r-new"></a>}}
\if{latex}{\out{\hypertarget{method-css2r-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new css2r object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{css2r$new(url, on_initialize = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{url}}{Character string. The URL of the website to analyze}

\item{\code{on_initialize}}{Logical. If TRUE, starts analysis automatically}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new `css2r` object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-css2r-check_internet"></a>}}
\if{latex}{\out{\hypertarget{method-css2r-check_internet}{}}}
\subsection{Method \code{check_internet()}}{
Check if internet connection is available
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{css2r$check_internet()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Logical. TRUE if internet connection is available, FALSE otherwise
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-css2r-download_html"></a>}}
\if{latex}{\out{\hypertarget{method-css2r-download_html}{}}}
\subsection{Method \code{download_html()}}{
Download the HTML content of the specified URL
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{css2r$download_html()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible. Updates the html_page field of the object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-css2r-extract_css_links"></a>}}
\if{latex}{\out{\hypertarget{method-css2r-extract_css_links}{}}}
\subsection{Method \code{extract_css_links()}}{
Extract all CSS stylesheet links from the HTML page
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{css2r$extract_css_links()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible. Updates the all_css_links field of the object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-css2r-filter_css_links"></a>}}
\if{latex}{\out{\hypertarget{method-css2r-filter_css_links}{}}}
\subsection{Method \code{filter_css_links()}}{
Filter CSS links to keep only those from the same domain
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{css2r$filter_css_links()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible. Updates the domain_css_links field of the object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-css2r-download_css_files"></a>}}
\if{latex}{\out{\hypertarget{method-css2r-download_css_files}{}}}
\subsection{Method \code{download_css_files()}}{
Download the content of all filtered CSS files
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{css2r$download_css_files()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible. Updates the css_content field of the object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-css2r-extract_colors"></a>}}
\if{latex}{\out{\hypertarget{method-css2r-extract_colors}{}}}
\subsection{Method \code{extract_colors()}}{
Extract all hex color codes from the CSS content
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{css2r$extract_colors()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible. Updates the all_colors field of the object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-css2r-analyze_colors"></a>}}
\if{latex}{\out{\hypertarget{method-css2r-analyze_colors}{}}}
\subsection{Method \code{analyze_colors()}}{
Analyze extracted colors to identify main color scheme
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{css2r$analyze_colors()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible. Updates the top_colors field of the object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-css2r-detect_google_fonts"></a>}}
\if{latex}{\out{\hypertarget{method-css2r-detect_google_fonts}{}}}
\subsection{Method \code{detect_google_fonts()}}{
Detect and extract Google Fonts information from CSS links
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{css2r$detect_google_fonts()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible. Updates the fonts field of the object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-css2r-generate_shiny_code"></a>}}
\if{latex}{\out{\hypertarget{method-css2r-generate_shiny_code}{}}}
\subsection{Method \code{generate_shiny_code()}}{
Generate Shiny theme code based on extracted colors and fonts
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{css2r$generate_shiny_code()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character string. The generated bslib theme code
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-css2r-clone"></a>}}
\if{latex}{\out{\hypertarget{method-css2r-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{css2r$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
